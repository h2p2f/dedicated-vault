// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "github.com/h2p2f/dedicated-vault/internal/client/models"
	mock "github.com/stretchr/testify/mock"
)

// Storager is an autogenerated mock type for the Storager type
type Storager struct {
	mock.Mock
}

// CreateData provides a mock function with given fields: user, data
func (_m *Storager) CreateData(user string, data models.StoredData) error {
	ret := _m.Called(user, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.StoredData) error); ok {
		r0 = rf(user, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: userName
func (_m *Storager) CreateUser(userName string) error {
	ret := _m.Called(userName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllData provides a mock function with given fields: user
func (_m *Storager) DeleteAllData(user string) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteData provides a mock function with given fields: user, data
func (_m *Storager) DeleteData(user string, data models.StoredData) error {
	ret := _m.Called(user, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.StoredData) error); ok {
		r0 = rf(user, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByMeta provides a mock function with given fields: user, meta
func (_m *Storager) FindByMeta(user string, meta string) ([]models.StoredData, error) {
	ret := _m.Called(user, meta)

	var r0 []models.StoredData
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]models.StoredData, error)); ok {
		return rf(user, meta)
	}
	if rf, ok := ret.Get(0).(func(string, string) []models.StoredData); ok {
		r0 = rf(user, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StoredData)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: user
func (_m *Storager) GetData(user string) ([]models.StoredData, error) {
	ret := _m.Called(user)

	var r0 []models.StoredData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.StoredData, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(string) []models.StoredData); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StoredData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataByUUID provides a mock function with given fields: user, uuid
func (_m *Storager) GetDataByUUID(user string, uuid string) (*models.StoredData, error) {
	ret := _m.Called(user, uuid)

	var r0 *models.StoredData
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.StoredData, error)); ok {
		return rf(user, uuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.StoredData); ok {
		r0 = rf(user, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StoredData)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastServerUpdated provides a mock function with given fields: username
func (_m *Storager) GetLastServerUpdated(username string) (int64, error) {
	ret := _m.Called(username)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: userName
func (_m *Storager) GetUserID(userName string) (int64, error) {
	ret := _m.Called(userName)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: user, data
func (_m *Storager) UpdateData(user string, data models.StoredData) error {
	ret := _m.Called(user, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.StoredData) error); ok {
		r0 = rf(user, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastServerUpdated provides a mock function with given fields: username, updateTime
func (_m *Storager) UpdateLastServerUpdated(username string, updateTime int64) error {
	ret := _m.Called(username, updateTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(username, updateTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorager creates a new instance of Storager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storager {
	mock := &Storager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
