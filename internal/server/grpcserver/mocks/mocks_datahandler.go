// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/h2p2f/dedicated-vault/internal/models"

	time "time"
)

// DataHandler is an autogenerated mock type for the DataHandler type
type DataHandler struct {
	mock.Mock
}

// ChangeData provides a mock function with given fields: ctx, user, data
func (_m *DataHandler) ChangeData(ctx context.Context, user models.User, data models.VaultData) (time.Time, error) {
	ret := _m.Called(ctx, user, data)

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User, models.VaultData) (time.Time, error)); ok {
		return rf(ctx, user, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User, models.VaultData) time.Time); ok {
		r0 = rf(ctx, user, data)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User, models.VaultData) error); ok {
		r1 = rf(ctx, user, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateData provides a mock function with given fields: ctx, user, data
func (_m *DataHandler) CreateData(ctx context.Context, user models.User, data models.VaultData) (string, time.Time, error) {
	ret := _m.Called(ctx, user, data)

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User, models.VaultData) (string, time.Time, error)); ok {
		return rf(ctx, user, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User, models.VaultData) string); ok {
		r0 = rf(ctx, user, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User, models.VaultData) time.Time); ok {
		r1 = rf(ctx, user, data)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.User, models.VaultData) error); ok {
		r2 = rf(ctx, user, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteData provides a mock function with given fields: ctx, user, data
func (_m *DataHandler) DeleteData(ctx context.Context, user models.User, data models.VaultData) error {
	ret := _m.Called(ctx, user, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User, models.VaultData) error); ok {
		r0 = rf(ctx, user, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllData provides a mock function with given fields: ctx, user
func (_m *DataHandler) GetAllData(ctx context.Context, user models.User) ([]models.VaultData, error) {
	ret := _m.Called(ctx, user)

	var r0 []models.VaultData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) ([]models.VaultData, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) []models.VaultData); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.VaultData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: ctx, user, uuidData
func (_m *DataHandler) GetData(ctx context.Context, user models.User, uuidData string) (models.VaultData, error) {
	ret := _m.Called(ctx, user, uuidData)

	var r0 models.VaultData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User, string) (models.VaultData, error)); ok {
		return rf(ctx, user, uuidData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User, string) models.VaultData); ok {
		r0 = rf(ctx, user, uuidData)
	} else {
		r0 = ret.Get(0).(models.VaultData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User, string) error); ok {
		r1 = rf(ctx, user, uuidData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataHandler creates a new instance of DataHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataHandler {
	mock := &DataHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
