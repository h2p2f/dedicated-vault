// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/h2p2f/dedicated-vault/internal/server/models"
)

// UserHandler is an autogenerated mock type for the UserHandler type
type UserHandler struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, user, newPassword
func (_m *UserHandler) ChangePassword(ctx context.Context, user models.User, newPassword string) (string, error) {
	ret := _m.Called(ctx, user, newPassword)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User, string) (string, error)); ok {
		return rf(ctx, user, newPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User, string) string); ok {
		r0 = rf(ctx, user, newPassword)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User, string) error); ok {
		r1 = rf(ctx, user, newPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, user
func (_m *UserHandler) DeleteUser(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, user
func (_m *UserHandler) GetUser(ctx context.Context, user string) (models.User, error) {
	ret := _m.Called(ctx, user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, user
func (_m *UserHandler) Login(ctx context.Context, user models.User) (string, int64, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (string, int64, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) int64); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.User) error); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: ctx, user
func (_m *UserHandler) Register(ctx context.Context, user models.User) (string, int64, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (string, int64, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) int64); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.User) error); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserHandler creates a new instance of UserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHandler {
	mock := &UserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
