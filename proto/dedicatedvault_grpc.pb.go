// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: proto/dedicatedvault.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DedicatedVault_Register_FullMethodName       = "/DedicatedVault/Register"
	DedicatedVault_Login_FullMethodName          = "/DedicatedVault/Login"
	DedicatedVault_ChangePassword_FullMethodName = "/DedicatedVault/ChangePassword"
	DedicatedVault_SaveSecret_FullMethodName     = "/DedicatedVault/SaveSecret"
	DedicatedVault_GetSecret_FullMethodName      = "/DedicatedVault/GetSecret"
	DedicatedVault_ChangeSecret_FullMethodName   = "/DedicatedVault/ChangeSecret"
	DedicatedVault_DeleteSecret_FullMethodName   = "/DedicatedVault/DeleteSecret"
	DedicatedVault_ListSecrets_FullMethodName    = "/DedicatedVault/ListSecrets"
)

// DedicatedVaultClient is the client API for DedicatedVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DedicatedVaultClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	SaveSecret(ctx context.Context, in *SaveSecretRequest, opts ...grpc.CallOption) (*SaveSecretResponse, error)
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	ChangeSecret(ctx context.Context, in *ChangeSecretRequest, opts ...grpc.CallOption) (*ChangeSecretResponse, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
}

type dedicatedVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewDedicatedVaultClient(cc grpc.ClientConnInterface) DedicatedVaultClient {
	return &dedicatedVaultClient{cc}
}

func (c *dedicatedVaultClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, DedicatedVault_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dedicatedVaultClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, DedicatedVault_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dedicatedVaultClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, DedicatedVault_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dedicatedVaultClient) SaveSecret(ctx context.Context, in *SaveSecretRequest, opts ...grpc.CallOption) (*SaveSecretResponse, error) {
	out := new(SaveSecretResponse)
	err := c.cc.Invoke(ctx, DedicatedVault_SaveSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dedicatedVaultClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, DedicatedVault_GetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dedicatedVaultClient) ChangeSecret(ctx context.Context, in *ChangeSecretRequest, opts ...grpc.CallOption) (*ChangeSecretResponse, error) {
	out := new(ChangeSecretResponse)
	err := c.cc.Invoke(ctx, DedicatedVault_ChangeSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dedicatedVaultClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, DedicatedVault_DeleteSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dedicatedVaultClient) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, DedicatedVault_ListSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DedicatedVaultServer is the server API for DedicatedVault service.
// All implementations must embed UnimplementedDedicatedVaultServer
// for forward compatibility
type DedicatedVaultServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	SaveSecret(context.Context, *SaveSecretRequest) (*SaveSecretResponse, error)
	GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
	ChangeSecret(context.Context, *ChangeSecretRequest) (*ChangeSecretResponse, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	mustEmbedUnimplementedDedicatedVaultServer()
}

// UnimplementedDedicatedVaultServer must be embedded to have forward compatible implementations.
type UnimplementedDedicatedVaultServer struct {
}

func (UnimplementedDedicatedVaultServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDedicatedVaultServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDedicatedVaultServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedDedicatedVaultServer) SaveSecret(context.Context, *SaveSecretRequest) (*SaveSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSecret not implemented")
}
func (UnimplementedDedicatedVaultServer) GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedDedicatedVaultServer) ChangeSecret(context.Context, *ChangeSecretRequest) (*ChangeSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSecret not implemented")
}
func (UnimplementedDedicatedVaultServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedDedicatedVaultServer) ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedDedicatedVaultServer) mustEmbedUnimplementedDedicatedVaultServer() {}

// UnsafeDedicatedVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DedicatedVaultServer will
// result in compilation errors.
type UnsafeDedicatedVaultServer interface {
	mustEmbedUnimplementedDedicatedVaultServer()
}

func RegisterDedicatedVaultServer(s grpc.ServiceRegistrar, srv DedicatedVaultServer) {
	s.RegisterService(&DedicatedVault_ServiceDesc, srv)
}

func _DedicatedVault_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DedicatedVaultServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DedicatedVault_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DedicatedVaultServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DedicatedVault_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DedicatedVaultServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DedicatedVault_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DedicatedVaultServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DedicatedVault_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DedicatedVaultServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DedicatedVault_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DedicatedVaultServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DedicatedVault_SaveSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DedicatedVaultServer).SaveSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DedicatedVault_SaveSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DedicatedVaultServer).SaveSecret(ctx, req.(*SaveSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DedicatedVault_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DedicatedVaultServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DedicatedVault_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DedicatedVaultServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DedicatedVault_ChangeSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DedicatedVaultServer).ChangeSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DedicatedVault_ChangeSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DedicatedVaultServer).ChangeSecret(ctx, req.(*ChangeSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DedicatedVault_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DedicatedVaultServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DedicatedVault_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DedicatedVaultServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DedicatedVault_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DedicatedVaultServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DedicatedVault_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DedicatedVaultServer).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DedicatedVault_ServiceDesc is the grpc.ServiceDesc for DedicatedVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DedicatedVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DedicatedVault",
	HandlerType: (*DedicatedVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _DedicatedVault_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _DedicatedVault_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _DedicatedVault_ChangePassword_Handler,
		},
		{
			MethodName: "SaveSecret",
			Handler:    _DedicatedVault_SaveSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _DedicatedVault_GetSecret_Handler,
		},
		{
			MethodName: "ChangeSecret",
			Handler:    _DedicatedVault_ChangeSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _DedicatedVault_DeleteSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _DedicatedVault_ListSecrets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dedicatedvault.proto",
}
